// Generated by Ignite ignite.com/cli
import { SigningStargateClient } from "@cosmjs/stargate";
import { Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { Api } from "./rest";
import { QueryParamsRequest } from "./types/bomb/tokenfactory/query";
import { QueryAllDenomRequest } from "./types/bomb/tokenfactory/query";
import { Denom } from "./types/bomb/tokenfactory/denom";
import { MsgUpdateParams } from "./types/bomb/tokenfactory/tx";
import { MsgCreateDenom } from "./types/bomb/tokenfactory/tx";
import { QueryParamsResponse } from "./types/bomb/tokenfactory/query";
import { QueryGetDenomResponse } from "./types/bomb/tokenfactory/query";
import { GenesisState } from "./types/bomb/tokenfactory/genesis";
import { Params } from "./types/bomb/tokenfactory/params";
import { MsgUpdateDenom } from "./types/bomb/tokenfactory/tx";
import { MsgDeleteDenomResponse } from "./types/bomb/tokenfactory/tx";
import { QueryGetDenomRequest } from "./types/bomb/tokenfactory/query";
import { MsgCreateDenomResponse } from "./types/bomb/tokenfactory/tx";
import { MsgUpdateDenomResponse } from "./types/bomb/tokenfactory/tx";
import { MsgDeleteDenom } from "./types/bomb/tokenfactory/tx";
import { QueryAllDenomResponse } from "./types/bomb/tokenfactory/query";
import { MsgUpdateParamsResponse } from "./types/bomb/tokenfactory/tx";
export { QueryParamsRequest, QueryAllDenomRequest, Denom, MsgUpdateParams, MsgCreateDenom, QueryParamsResponse, QueryGetDenomResponse, GenesisState, Params, MsgUpdateDenom, MsgDeleteDenomResponse, QueryGetDenomRequest, MsgCreateDenomResponse, MsgUpdateDenomResponse, MsgDeleteDenom, QueryAllDenomResponse, MsgUpdateParamsResponse };
export const registry = new Registry(msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
export const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendQueryParamsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryParamsRequest({ value: QueryParamsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllDenomRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllDenomRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryAllDenomRequest({ value: QueryAllDenomRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllDenomRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendDenom({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendDenom: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.denom({ value: Denom.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendDenom: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateDenom({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateDenom: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgCreateDenom({ value: MsgCreateDenom.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateDenom: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryParamsResponse({ value: QueryParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetDenomResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetDenomResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryGetDenomResponse({ value: QueryGetDenomResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetDenomResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.genesisState({ value: GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.params({ value: Params.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateDenom({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateDenom: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgUpdateDenom({ value: MsgUpdateDenom.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateDenom: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgDeleteDenomResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgDeleteDenomResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgDeleteDenomResponse({ value: MsgDeleteDenomResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgDeleteDenomResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetDenomRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetDenomRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryGetDenomRequest({ value: QueryGetDenomRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetDenomRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateDenomResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateDenomResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgCreateDenomResponse({ value: MsgCreateDenomResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateDenomResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateDenomResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateDenomResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgUpdateDenomResponse({ value: MsgUpdateDenomResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateDenomResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgDeleteDenom({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgDeleteDenom: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgDeleteDenom({ value: MsgDeleteDenom.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgDeleteDenom: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllDenomResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllDenomResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryAllDenomResponse({ value: QueryAllDenomResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllDenomResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgUpdateParamsResponse({ value: MsgUpdateParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        queryParamsRequest({ value }) {
            try {
                return { typeUrl: "/bomb.tokenfactory.QueryParamsRequest", value: QueryParamsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message);
            }
        },
        queryAllDenomRequest({ value }) {
            try {
                return { typeUrl: "/bomb.tokenfactory.QueryAllDenomRequest", value: QueryAllDenomRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllDenomRequest: Could not create message: ' + e.message);
            }
        },
        denom({ value }) {
            try {
                return { typeUrl: "/bomb.tokenfactory.Denom", value: Denom.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Denom: Could not create message: ' + e.message);
            }
        },
        msgUpdateParams({ value }) {
            try {
                return { typeUrl: "/bomb.tokenfactory.MsgUpdateParams", value: MsgUpdateParams.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message);
            }
        },
        msgCreateDenom({ value }) {
            try {
                return { typeUrl: "/bomb.tokenfactory.MsgCreateDenom", value: MsgCreateDenom.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateDenom: Could not create message: ' + e.message);
            }
        },
        queryParamsResponse({ value }) {
            try {
                return { typeUrl: "/bomb.tokenfactory.QueryParamsResponse", value: QueryParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message);
            }
        },
        queryGetDenomResponse({ value }) {
            try {
                return { typeUrl: "/bomb.tokenfactory.QueryGetDenomResponse", value: QueryGetDenomResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetDenomResponse: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/bomb.tokenfactory.GenesisState", value: GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        params({ value }) {
            try {
                return { typeUrl: "/bomb.tokenfactory.Params", value: Params.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Params: Could not create message: ' + e.message);
            }
        },
        msgUpdateDenom({ value }) {
            try {
                return { typeUrl: "/bomb.tokenfactory.MsgUpdateDenom", value: MsgUpdateDenom.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateDenom: Could not create message: ' + e.message);
            }
        },
        msgDeleteDenomResponse({ value }) {
            try {
                return { typeUrl: "/bomb.tokenfactory.MsgDeleteDenomResponse", value: MsgDeleteDenomResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgDeleteDenomResponse: Could not create message: ' + e.message);
            }
        },
        queryGetDenomRequest({ value }) {
            try {
                return { typeUrl: "/bomb.tokenfactory.QueryGetDenomRequest", value: QueryGetDenomRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetDenomRequest: Could not create message: ' + e.message);
            }
        },
        msgCreateDenomResponse({ value }) {
            try {
                return { typeUrl: "/bomb.tokenfactory.MsgCreateDenomResponse", value: MsgCreateDenomResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateDenomResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateDenomResponse({ value }) {
            try {
                return { typeUrl: "/bomb.tokenfactory.MsgUpdateDenomResponse", value: MsgUpdateDenomResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateDenomResponse: Could not create message: ' + e.message);
            }
        },
        msgDeleteDenom({ value }) {
            try {
                return { typeUrl: "/bomb.tokenfactory.MsgDeleteDenom", value: MsgDeleteDenom.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgDeleteDenom: Could not create message: ' + e.message);
            }
        },
        queryAllDenomResponse({ value }) {
            try {
                return { typeUrl: "/bomb.tokenfactory.QueryAllDenomResponse", value: QueryAllDenomResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllDenomResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateParamsResponse({ value }) {
            try {
                return { typeUrl: "/bomb.tokenfactory.MsgUpdateParamsResponse", value: MsgUpdateParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message);
            }
        },
    };
};
export const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new Api({ baseURL: addr });
};
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = queryClient({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = txClient({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            BombTokenfactory: new SDKModule(test)
        },
        registry: msgTypes
    };
};
export default IgntModule;
